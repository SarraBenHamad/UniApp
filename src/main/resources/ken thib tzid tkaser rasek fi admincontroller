

/* ekher wahda litmchi w matmchich
    private void showUpdateDialog(Student student) {
        Dialog<Student> dialog = new Dialog<>();
        dialog.setTitle("Update Student");

        ButtonType updateButtonType = new ButtonType("Update", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(updateButtonType, ButtonType.CANCEL);

        // Create text fields for each field to update
        TextField nameField = new TextField(student.getName());
        TextField birthDateField = new TextField(student.getBirthDate());
        TextField averageField = new TextField(String.valueOf(student.getAverage()));

        // Create text fields for each subject's grade and populate them with existing grades
        TextField javaExamField = new TextField();
        TextField mathematicsExamField = new TextField();
        TextField mathematicsDsField = new TextField();
        TextField architectureExamField = new TextField();
        TextField architectureDsField = new TextField();
        TextField architectureTpField = new TextField();
        TextField computersExamField = new TextField();
        TextField computersDsField = new TextField();
        TextField computersTpField = new TextField();
//waayyywa
        // Populate text fields with existing grades
        for (Subject subject : student.getGrades()) {
            switch (subject.getName()) {
                case "java":
                    javaExamField.setText(String.valueOf(subject.getNote().getExam()));
                    break;
                case "mathematics":
                    //if (subject.getNote().getDs() != 0) {
                        mathematicsDsField.setText(String.valueOf(subject.getNote().getDs()));
                   // } else {
                        mathematicsExamField.setText(String.valueOf(subject.getNote().getExam()));
                    //}
                    break;
                case "architecture":
                   // if (subject.getNote().getTp() != 0) {
                        architectureTpField.setText(String.valueOf(subject.getNote().getTp()));
                   // } else if (subject.getNote().getDs() != 0) {
                        architectureDsField.setText(String.valueOf(subject.getNote().getDs()));
                   // } else {
                        architectureExamField.setText(String.valueOf(subject.getNote().getExam()));
                   // }
                    break;
                    /*
                case "computers":
                   // if (subject.getNote().getTp() != 0) {
                        computersTpField.setText(String.valueOf(subject.getNote().getTp()));
                   // } else if (subject.getNote().getDs() != 0) {
                        computersDsField.setText(String.valueOf(subject.getNote().getDs()));
                   // } else {
                        computersExamField.setText(String.valueOf(subject.getNote().getExam()));
                  //  }
                    break;//
                case "computers":
                    if (subject.getNote() != null) {
                        computersTpField.setText(String.valueOf(subject.getNote().getTp()));
                        computersDsField.setText(String.valueOf(subject.getNote().getDs()));
                        computersExamField.setText(String.valueOf(subject.getNote().getExam()));
                    }
                    break;

                default:
                    break;
            }
        }

        GridPane grid = new GridPane();
        grid.add(new Label("Name:"), 0, 0);
        grid.add(nameField, 1, 0);
        grid.add(new Label("Birth Date:"), 0, 1);
        grid.add(birthDateField, 1, 1);
        grid.add(new Label("Average:"), 0, 2);
        grid.add(averageField, 1, 2);

        // Add fields for each subject's grade
        grid.add(new Label("Java Exam:"), 0, 3);
        grid.add(javaExamField, 1, 3);
        grid.add(new Label("Mathematics Exam:"), 0, 4);
        grid.add(mathematicsExamField, 1, 4);
        grid.add(new Label("Mathematics DS:"), 0, 5);
        grid.add(mathematicsDsField, 1, 5);
        grid.add(new Label("Architecture Exam:"), 0, 6);
        grid.add(architectureExamField, 1, 6);
        grid.add(new Label("Architecture DS:"), 0, 7);
        grid.add(architectureDsField, 1, 7);
        grid.add(new Label("Architecture TP:"), 0, 8);
        grid.add(architectureTpField, 1, 8);
        grid.add(new Label("Computers Exam:"), 0, 9);
        grid.add(computersExamField, 1, 9);
        grid.add(new Label("Computers DS:"), 0, 10);
        grid.add(computersDsField, 1, 10);
        grid.add(new Label("Computers TP:"), 0, 11);
        grid.add(computersTpField, 1, 11);

        dialog.getDialogPane().setContent(grid);

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == updateButtonType) {
                // Update the student object with the new values from the text fields
                student.setFullname(nameField.getText());
                student.setBirthDate(birthDateField.getText());

                // Clear existing grades before adding new ones
                student.initGrades();

                // Add grades for each subject
                addGradeIfNotEmpty(javaExamField.getText(), "java", student, 1, true, false, false);
                addGradeIfNotEmpty(mathematicsExamField.getText(), "mathematics", student, 2, true, true, false);
                addGradeIfNotEmpty(mathematicsDsField.getText(), "mathematics", student, 2, true, true, false);
                addGradeIfNotEmpty(architectureExamField.getText(), "architecture", student, 1, true, true, true);
                addGradeIfNotEmpty(architectureDsField.getText(), "architecture", student, 1, true, true, true);
                addGradeIfNotEmpty(architectureTpField.getText(), "architecture", student, 1, true, true, true);
                addGradeIfNotEmpty(computersExamField.getText(), "computers", student, 1, true, true, true);
                addGradeIfNotEmpty(computersDsField.getText(), "computers", student, 1, true, true, true);
                addGradeIfNotEmpty(computersTpField.getText(), "computers", student, 1, true, true, true);

// Update notes for each subject
                updateNoteIfNotEmpty(javaExamField.getText(), "java", student);
                updateNoteIfNotEmpty(mathematicsExamField.getText(), "mathematics", student);
                updateNoteIfNotEmpty(mathematicsDsField.getText(), "mathematics", student);
                updateNoteIfNotEmpty(architectureExamField.getText(), "architecture", student);
                updateNoteIfNotEmpty(architectureDsField.getText(), "architecture", student);
                updateNoteIfNotEmpty(architectureTpField.getText(), "architecture", student);
                updateNoteIfNotEmpty(computersExamField.getText(), "computers", student);
                updateNoteIfNotEmpty(computersDsField.getText(), "computers", student);
                updateNoteIfNotEmpty(computersTpField.getText(), "computers", student);
                // Recalculate the average
                student.calculateAverage();
                // Update the average field
                averageField.setText(String.valueOf(student.getAverage()));
                return student;
            }
            return null;
        });

        // Show the dialog
        Optional<Student> result = dialog.showAndWait();
        // Handle the result if needed
        result.ifPresent(updatedStudent -> {
            // Perform actions with the updated student if needed
            // Refresh the table view to show updated student data
            table.refresh();

            // Save the updated student to the database
            saveStudent(updatedStudent);
        });
    }
*/

private void updateNoteIfNotEmpty(String gradeText, String subjectName, Student student) {
        if (!gradeText.isEmpty()) {
            double grade = Double.parseDouble(gradeText);
            for (Subject subject : student.getGrades()) {
                if (subject.getName().equals(subjectName)) {
                    switch (subjectName) {
                        case "java":
                            subject.getNote().setExam(grade);
                            break;
                        case "mathematics":
                            if (subject.getNote().getDs() != 0) {
                                subject.getNote().setDs(grade);
                            } else {
                                subject.getNote().setExam(grade);
                            }
                            break;
                        case "architecture":
                            if (subject.getNote().getTp() != 0) {
                                subject.getNote().setTp(grade);
                            } else if (subject.getNote().getDs() != 0) {
                                subject.getNote().setDs(grade);
                            } else {
                                subject.getNote().setExam(grade);
                            }
                            break;
                        case "computers":
                            if (subject.getNote().getTp() != 0) {
                                subject.getNote().setTp(grade);
                            } else if (subject.getNote().getDs() != 0) {
                                subject.getNote().setDs(grade);
                            } else {
                                subject.getNote().setExam(grade);
                            }
                            break;
                        default:
                            break;
                    }
                    break; // Exit loop once the subject is found and updated
                }
            }
        }
    }



    // Utility method to add grade if the input is not empty
    private void addGradeIfNotEmpty(String gradeInput, String subjectName, Student student, int coef, boolean hasExam, boolean hasDs, boolean hasTp) {
        if (!gradeInput.isEmpty()) {
            double grade = Double.parseDouble(gradeInput);
            Note note = null;
            if (hasExam && hasDs && hasTp) {
                note = new Note(grade, grade, grade); // Adjust this to use the correct inputs
            } else if (hasExam && hasDs) {
                note = new Note(grade, grade);
            } else if (hasExam) {
                note = new Note(grade);
            }
            Subject subject = new Subject(subjectName, coef, note);
            student.addGrade(subject);
        }
    }

    // Utility method to get the coefficient for a subject
    private int getSubjectCoefficient(String subjectName) {
        switch (subjectName) {
            case "java":
                return 1;
            case "mathematics":
                return 2;
            case "architecture":
                return 1;
            case "computers":
                return 1;
            default:
                return 0; // Default coefficient
        }
    }
*/
